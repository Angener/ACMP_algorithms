package by.gp_solution.eremenko.part9;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**
 * Большой концертный зал Байтланда — известное на весь мир место, где мечтают
 * выступать величайшие оперные певцы и певицы. В желающих послушать их
 * выступления, как правило, недостатка нет. Поэтому Министерством культуры
 * Байтланда было принято решение увеличить размеры зала.
 * Однако это вызвало другую проблему: на задних рядах обновленного концертного
 * зала посетители практически ничего не слышат. Поэтому Инженерный институт
 * предложил проект акустической системы, которая будет состоять из микрофонов,
 * записывающих происходящее на сцене, и динамиков, транслирующих усиленный звук
 * в зал.
 * В идеальном случае динамики должны достоверно воспроизводить звук, записываемый
 * с микрофонов. На практике этого добиться почти невозможно, так как при текущем
 * уровне развития технологий практически все динамики воспроизводят различные
 * частоты с различной громкостью. Мириться с этим инженеры, однако, не собираются.
 * В лаборатории удалось измерить АЧХ (амплитудно-частотную характеристику)
 * динамиков и представить ее в следующей форме:
 * весь диапазон частот, воспроизводимых динамиками, разделен на N последовательных
 * интервалов, нумеруемых от 1 до N; в i-м интервале известно Ai - значение
 * усредненной по интервалу громкости в децибелах (Прим.: децибел (дБ) — единица
 * измерения громкости).
 * АЧХ из примера №2 и усилители, которые нужны, чтобы ее «выровнять» на уровне
 * в 4 дБ (5 штук, усилители применяются в порядке от верхних к нижним)
 * АЧХ динамиков можно править с помощью специальных электронных устройств —
 * усилителей. Усилитель может поднять силу сигнала на всех интервалах с A-го по B-й
 * на 1 дБ, где A, B — произвольные натуральные числа, не превосходящие N, A ≤ B. Из
 * -за особенностей применяемых в устройстве радиодеталей, сила сигнала перед
 * применением усилителя должна быть одинакова на всех интервалах с A-го по B-ой.
 * Так как стоимость усилителя достаточно велика, то их количество должно быть минимально.
 * <p>
 * Считается, что динамики воспроизводят звук достоверно, если на всех интервалах
 * значение громкости одинаково. Напишите программу, которая вычислит минимальное
 * число усилителей, необходимое для достижения достоверного звучания.
 * Входные данные:
 * Первая строка входного файла INPUT.TXT содержит одно число N (1 ≤ N ≤ 200000)
 * — количество интервалов, на которых замерялась АЧХ. Вторая строка содержит N
 * натуральных чисел Ai (1 ≤ i ≤ N, 1 ≤ Ai ≤ 109), разделенных одиночными пробелами
 * — усредненная громкость на i-м интервале в децибелах.
 * Выходные данные:
 * Единственная строка выходного файла OUTPUT.TXT должна содержать одно целое
 * число — минимальное число усилителей, с помощью которых можно добиться достоверного
 * звучания.
 *
 * @author Andrei Eremenko
 * @version 1.0  Jan 2020
 */
public class Task6541 {

    public static void main(String[] args) throws IOException {

        File fileIn = new File("INPUT.TXT");
        File fileOut = new File("OUTPUT.TXT");
        Scanner sc = new Scanner(new File(String.valueOf(fileIn)));

        int frequency = sc.nextInt();

        int[] array = new int[frequency];
        // выводим срудний сигнал интервалов из файла в массив
        for (int i = 0; i < array.length; i++) {
            array[i] = sc.nextInt();
        }

        int max = array[0];
        int min = array[0];

        // вычисляем минимальный и максимальный усредненные уровни сигнала
        for (int value : array) {
            if (value < min) {
                min = value;
            }
            if (value > max) {
                max = value;
            }
        }

        long counter = 0;
        // добавляем усилители от нижнего уровня к верхнему

        for (int i = 0; i < array.length; i++){

            if(i != array.length - 1 && array[i] !=0 && array[i] == array[i + 1]){
                while (array[i] != array[i - 1]){
                    array[i]++;
                }

            } else {

                while ((i != array.length - 1 && array[i] < array[i + 1]) || (i == array.length - 1 && array[i] < array[i - 1])
                        || (i != 0 && array[i] < array[i - 1] && array[i] != array[i] + 1)) {
                    array[i]++;
                    counter++;
                }
            }
        }

        for (int value : array) {
            System.err.print(value + " ");
        }

        writeResult(fileOut, counter);
        sc.close();
    }

    private static void writeResult(File fileOut, long counter) {
        try (FileWriter fileWriter = new FileWriter(fileOut)) {
            fileWriter.write(counter + "");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
